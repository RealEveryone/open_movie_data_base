# Generated by Django 4.1.3 on 2022-12-06 12:18

import cloudinary.models
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import open_movie_data_base.user.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=35, unique=True, validators=[open_movie_data_base.user.validators.UsernameValidator()])),
                ('email', models.EmailField(error_messages={'unique': 'This email address is already in use by another user.'}, max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_regular_user', models.BooleanField(default=False)),
                ('is_movie_director', models.BooleanField(default=False)),
                ('is_actor', models.BooleanField(default=False)),
                ('type_of_user', models.CharField(choices=[('User', 'User'), ('Actor', 'Actor'), ('MovieDirector', 'Movie Director')], default='', max_length=14)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('profile_picture', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('filmography', models.TextField(blank=True, null=True)),
                ('biography', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MovieDirector',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('profile_picture', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('filmography', models.TextField(blank=True, null=True)),
                ('biography', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegularUser',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, validators=[open_movie_data_base.user.validators.names_validator])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('profile_picture', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
